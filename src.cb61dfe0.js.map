{"version":3,"sources":["io.js","chippy8.js","index.js"],"names":["IO","canvas","cols","rows","scale","width","height","displayContext","fillStyle","backgroundColor","fillRect","display","Array","i","x","y","index","val","pixelColor","pixelSize","clearBackground","Math","floor","drawPixel","event","keysCurrentlyPressed","keypadMap","keyCode","keyPressDetector","oscillator","audioContext","createOscillator","type","frequency","setValueAtTime","currentTime","play","connect","destination","start","stop","disconnect","getContext","clearDisplay","resizeCanvas","window","addEventListener","keyDownHandler","bind","keyUpHandler","AudioContext","webkitAudioContext","Chippy8","rom","fonts","length","memory","data","Uint8Array","console","log","iteration","isExecuting","oc","pc","decode","delayTimer","soundTimer","io","playAudio","draw","stack","sp","v","res","error","random","xCoord","yCoord","row","spriteData","pix","mask","currSpritePixel","screenPixel","getPixel","setPixel","pressedKey","instruction","pop","push","sum","Error","rand","parseInt","ri","chippy8","romFileData","undefined","fps","document","getElementById","fileToRead","reloadButton","handleFileUpload","files","fileReader","FileReader","readAsArrayBuffer","onloadend","target","result","byteLength","loadRom","cancelAnimationFrame","animate","uploadRomToMemory","reloadRom","alert","setTimeout","requestAnimationFrame","emulatorLoop"],"mappings":"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","file":"src.cb61dfe0.js","sourceRoot":"..\\src","sourcesContent":["class IO {\r\n    constructor(canvas, cols, rows, scale) {\r\n        // Display\r\n        this.canvas = canvas;\r\n        this.displayContext = canvas.getContext('2d');\r\n        this.backgroundColor = 'rgb(0,0,0)';\r\n        this.pixelColor = 'rgb(255,255,255)';\r\n\r\n        this.cols = cols;\r\n        this.rows = rows;\r\n        this.scale = scale;\r\n\r\n        this.width = this.cols * this.scale;\r\n        this.height = this.rows * this.scale;\r\n        this.pixelSize = 1 * this.scale;\r\n        this.display = null;\r\n        this.clearDisplay();\r\n\r\n        this.resizeCanvas(this.width, this.height);\r\n        this.clearBackground();\r\n\r\n        // Keyboard - needs binding otherwise cannot access keypad mappings\r\n        window.addEventListener('keydown', this.keyDownHandler.bind(this), false);\r\n        window.addEventListener('keyup', this.keyUpHandler.bind(this), false);\r\n        this.keypadMap = {\r\n            49: 0x1, // 1:1\r\n            50: 0x2, // 2:2\r\n            51: 0x3, // 3:3\r\n            52: 0xC, // 4:C\r\n\r\n            81: 0x4, // q:4\r\n            87: 0x5, // w:5\r\n            69: 0x6, // e:6\r\n            82: 0xD, // r:D\r\n\r\n            65: 0x7, // a:7\r\n            83: 0x8, // s:8\r\n            68: 0x9, // d:9\r\n            70: 0xE, // f:E\r\n\r\n            90: 0xA, // z:A\r\n            88: 0x0, // x:0\r\n            67: 0xB, // c:B\r\n            86: 0xF  // v:F\r\n        };\r\n        this.keysCurrentlyPressed = [];\r\n        this.keyPressDetector = null;\r\n\r\n        // Audio\r\n        this.audioContext = new (window.AudioContext || window.webkitAudioContext)();\r\n        this.oscillator = null;\r\n    }\r\n\r\n    /** \r\n     * Display\r\n    */\r\n    resizeCanvas = (width, height) => {\r\n        this.canvas.width = width;\r\n        this.canvas.height = height;\r\n    }\r\n\r\n    clearBackground = () => {\r\n        this.displayContext.fillStyle = this.backgroundColor;\r\n        this.displayContext.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n    }\r\n\r\n    clearDisplay = () => {\r\n        this.display = new Array(this.cols * this.rows);\r\n        for(let i = 0; i < this.cols*this.rows; i++)\r\n            this.display[i] = 0;\r\n    }\r\n\r\n    getPixel = (x,y) => {\r\n        let index = x + (y * this.cols);\r\n        return this.display[index];\r\n    }\r\n\r\n    setPixel = (x,y,val) => {\r\n        // Wrap x and y \r\n        if(x > this.cols)\r\n            x -= this.cols;\r\n        else if(x < 0)\r\n            x += this.cols;\r\n\r\n        if(y > this.rows)\r\n            y -= this.rows;\r\n        else if(y<0)\r\n            y += this.rows;\r\n\r\n        let index = x + (y * this.cols);\r\n        this.display[index] = val;\r\n    }\r\n\r\n    drawPixel = (x, y) => {\r\n        this.displayContext.fillStyle = this.pixelColor;\r\n        this.displayContext.fillRect(x, y, this.pixelSize, this.pixelSize);\r\n    }\r\n\r\n    draw = () => {\r\n        this.clearBackground();\r\n\r\n        for (let i = 0; i < this.cols*this.rows; i++) {\r\n            // https://softwareengineering.stackexchange.com/a/212813\r\n            let x = (i % this.cols) * this.scale;\r\n            let y = Math.floor(i / this.cols) * this.scale;\r\n\r\n            if (this.display[i] == 1) {\r\n                this.drawPixel(x,y);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** \r\n     * Keyboard\r\n    */\r\n    keyDownHandler = (event) => {\r\n        this.keysCurrentlyPressed[this.keypadMap[event.keyCode]] = true;\r\n\r\n        // Make sure the keypress is not null\r\n        if (this.keyPressDetector) {\r\n            this.keyPressDetector(this.keypadMap[event.keyCode]);\r\n            // Make it null for the next time\r\n            this.keyPressDetector = null;\r\n        }\r\n    }\r\n    \r\n    keyUpHandler = (event) => {\r\n        this.keysCurrentlyPressed[this.keypadMap[event.keyCode]] = false;\r\n    }\r\n\r\n    /** \r\n     * Audio\r\n    */\r\n    createOscillator = () => {\r\n        this.oscillator = this.audioContext.createOscillator();\r\n        this.oscillator.type = 'sine';\r\n        this.oscillator.frequency.setValueAtTime(440, this.audioContext.currentTime);\r\n    }\r\n\r\n    playAudio = (play) => {\r\n        if (play) {\r\n            if (this.oscillator == null) {\r\n                this.createOscillator();\r\n\r\n                this.oscillator.connect(this.audioContext.destination);\r\n                this.oscillator.start();\r\n            }\r\n        } else {\r\n            if (this.oscillator) {\r\n                this.oscillator.stop();\r\n                this.oscillator.disconnect();\r\n                this.oscillator = null;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default IO;","import IO from \"./io\";\r\n\r\nclass Chippy8 {\r\n    constructor(canvas) {\r\n        this.io = new IO(canvas, 64, 32, 10);\r\n        \r\n        this.memory = new Uint8Array(4096);\r\n        this.pc = 0x200;\r\n        this.i = 0;\r\n        this.stack = [];\r\n        this.sp = 0;\r\n        this.delayTimer = 0;\r\n        this.soundTimer = 0;\r\n        this.v = new Uint8Array(16);\r\n        this.isExecuting = true;\r\n        this.fonts = [\r\n            0xF0, 0x90, 0x90, 0x90, 0xF0, // 0\r\n            0x20, 0x60, 0x20, 0x20, 0x70, // 1\r\n            0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2\r\n            0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3\r\n            0x90, 0x90, 0xF0, 0x10, 0x10, // 4\r\n            0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5\r\n            0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6\r\n            0xF0, 0x10, 0x20, 0x40, 0x40, // 7\r\n            0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8\r\n            0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9\r\n            0xF0, 0x90, 0xF0, 0x90, 0x90, // A\r\n            0xE0, 0x90, 0xE0, 0x90, 0xE0, // B\r\n            0xF0, 0x80, 0x80, 0x80, 0xF0, // C\r\n            0xE0, 0x90, 0x90, 0x90, 0xE0, // D\r\n            0xF0, 0x80, 0xF0, 0x80, 0xF0, // E\r\n            0xF0, 0x80, 0xF0, 0x80, 0x80  // F\r\n        ];\r\n    }\r\n\r\n    uploadRomToMemory = (rom) => {\r\n        // Add fonts to memory\r\n        for (let i = 0; i < this.fonts.length; i++) {\r\n            this.memory[i] = this.fonts[i];\r\n        }\r\n\r\n        // Load rom to memory\r\n        const data = new Uint8Array(rom);\r\n        // console.log(data);\r\n        for (let i = 0; i < data.length; i++) {\r\n            this.memory[0x200 + i] = data[i];            \r\n        }\r\n\r\n        console.log(\"Rom uploaded to memory\");\r\n    }\r\n\r\n    emulatorLoop = () => {\r\n        // Instructions\r\n        for (let iteration = 0; iteration < 10; iteration++) {\r\n            if (this.isExecuting) {\r\n                // FETCH\r\n                let oc = (this.memory[this.pc] << 8) | (this.memory[this.pc + 1]);\r\n                // DECODE AND EXECUTE\r\n                this.decode(oc);\r\n            }\r\n        }\r\n\r\n        // Updates\r\n        if (this.isExecuting) {\r\n            if(this.delayTimer > 0) this.delayTimer--;\r\n            if(this.soundTimer > 0) this.soundTimer--;\r\n        }\r\n\r\n        // Sound Play\r\n        if (this.soundTimer > 0) this.io.playAudio(true);\r\n        else this.io.playAudio(false);\r\n\r\n        // Draw Game\r\n        this.io.draw();\r\n    }\r\n\r\n    decode = (oc) => {\r\n        // Increment PC by 2 to fetch next opcode \r\n        this.pc += 2;\r\n    \r\n        // X: The second nibble. Used to look up one of the 16 registers (VX) from V0 through VF.\r\n        // Y: The third nibble. Also used to look up one of the 16 registers (VY) from V0 through VF.\r\n        // N: The fourth nibble. A 4-bit number.\r\n        // NN: The second byte (third and fourth nibbles). An 8-bit immediate number.\r\n        // NNN: The second, third and fourth nibbles. A 12-bit immediate memory address.\r\n\r\n        // x and y is required to look up a value in the corresponding register\r\n        let x = (oc & 0x0F00) >> 8;\r\n        let y = (oc & 0x00F0) >> 4;\r\n\r\n        switch (oc & 0xF000) {\r\n            case 0x0000:\r\n                switch (oc) {\r\n                    case 0x00E0: // 00E0 - CLS\r\n                        this.io.clearDisplay();\r\n                        break;\r\n                    case 0x00EE: // 00EE - RET\r\n                        this.pc = this.stack[--this.sp];\r\n                        break;\r\n                }\r\n                break;\r\n            case 0x1000: // 1NNN - JP addr\r\n                this.pc = (oc & 0x0FFF);\r\n                break;\r\n            case 0x2000: // 2NNN - CALL addr\r\n                this.stack[this.sp++] = this.pc;\r\n                this.pc = (oc & 0x0FFF);\r\n                break;\r\n            case 0x3000: // 3XNN - SE Vx, byte\r\n                if (this.v[x] === (oc & 0x00FF)) {\r\n                    this.pc += 2;\r\n                } \r\n                break;\r\n            case 0x4000: // 4XNN - SNE Vx, byte\r\n                if (this.v[x] != (oc & 0x00FF)) {\r\n                    this.pc += 2;\r\n                }\r\n                break;\r\n            case 0x5000: // 5XNN - SE Vx, Vy\r\n                if (this.v[x] === this.v[y]) {\r\n                    this.pc += 2;\r\n                }\r\n                break;\r\n            case 0x6000: // 6XNN - LD Vx, byte\r\n                this.v[x] = (oc & 0x00FF); \r\n                break;\r\n            case 0x7000: // 7XNN - ADD Vx, byte\r\n                this.v[x] += (oc & 0x00FF); \r\n                break;\r\n            // ALU\r\n            case 0x8000: \r\n                switch (oc & 0x000F) {\r\n                    case 0x0000: // 8XY0 - LD Vx, Vy\r\n                        this.v[x] = this.v[y];\r\n                        break;\r\n                    case 0x0001: // 8XY1 - OR Vx, Vy\r\n                        this.v[x] = this.v[x] | this.v[y];\r\n                        break;\r\n                    case 0x0002: // 8XY2 - AND Vx, Vy\r\n                        this.v[x] = this.v[x] & this.v[y];\r\n                        break;\r\n                    case 0x0003: // 8XY3 - XOR Vx, Vy\r\n                        this.v[x] = this.v[x] ^ this.v[y];\r\n                        break;\r\n                    case 0x0004: // 8XY4 - ADD Vx, Vy\r\n                        let res = this.v[x] + this.v[y];\r\n                        if (res > 255)\r\n                            this.v[0xF] = 1;\r\n                        else\r\n                            this.v[0xF] = 0;\r\n\r\n                        this.v[x] = (res & 0x00FF);\r\n                        break;\r\n                    case 0x0005: // 8XY5 - SUB Vx, Vy\r\n                        if (this.v[x] > this.v[y])\r\n                            this.v[0xF] = 1;\r\n                        else\r\n                            this.v[0xF] = 0;\r\n\r\n                        this.v[x] -= this.v[y];\r\n                        break;\r\n                    case 0x0006: // 8XY6 - SHR Vx {, Vy}\r\n                        if ((this.v[x] & 0x1) == 1)\r\n                            this.v[0xF] = 1;\r\n                        else \r\n                            this.v[0xF] = 0;\r\n\r\n                        // this.v[x] /= 2;\r\n                        this.v[x] >>= 1;\r\n                        break;\r\n                    case 0x0007: // 8XY7 - SUBN Vx, Vy\r\n                        if (this.v[y] > this.v[x])\r\n                            this.v[0xF] = 1;\r\n                        else\r\n                            this.v[0xF] = 0;\r\n\r\n                        this.v[x] = this.v[y] - this.v[x];\r\n                        break;\r\n                    case 0x000E: // 8XYE - SHL Vx {, Vy}\r\n                        if ((this.v[x] & 0x0080) == 1)\r\n                            this.v[0xF] = 1;\r\n                        else\r\n                            this.v[0xF] = 0;\r\n\r\n                        this.v[x] *= 2;\r\n                        break;\r\n                    default:\r\n                        console.error(\"Wrong opcode for ALU: \" + oc);\r\n                        break;\r\n                }\r\n                break;\r\n            case 0x9000: // 9XY0 - SNE Vx, Vy\r\n                if(this.v[x] != this.v[y])\r\n                    this.pc += 2;\r\n                break;\r\n            case 0xA000: // ANNN - LD I, addr\r\n                this.i = (oc & 0x0FFF);\r\n                break;\r\n            case 0xB000: // BNNN - JP V0, addr\r\n                this.pc = this.v[0x0] + (oc & 0x0FFF);\r\n                break;\r\n            case 0xC000: // CXNN - RND Vx, byte\r\n                let random = Math.floor(Math.random() * 255);\r\n                this.v[x] = random & (oc & 0x00FF);\r\n                break;\r\n            case 0xD000: // DXYN - DRW Vx, Vy, nibble\r\n                let xCoord = this.v[x];\r\n                let yCoord = this.v[y];\r\n                let rows = oc & 0x000F; // N rows\r\n                \r\n                // Set VF to 0\r\n                this.v[0xF] = 0;\r\n\r\n                for (let row = 0; row < rows; row++) {\r\n                    let spriteData = this.memory[this.i + row];\r\n                    \r\n                    for (let pix = 0; pix < 8; pix++) {                        \r\n                        xCoord = this.v[x] + pix;\r\n                        yCoord = this.v[y] + row;\r\n\r\n                        // 0x0080      == 0000 0000 1000 0000\r\n                        // 0x0080 >> 0 == 0000 0000 1000 0000\r\n                        // 0x0080 >> 1 == 0000 0000 0100 0000\r\n                        // 0x0080 >> 7 == 0000 0000 0000 0001\r\n                        let mask = 0x0080 >> pix;\r\n                        let currSpritePixel = (spriteData & mask); \r\n                        let screenPixel = this.io.getPixel(xCoord, yCoord);\r\n                        \r\n                        // Current pixel in Sprite is on\r\n                        // Screen pixel is on\r\n                        // Turn off the pixel and set VF to 1\r\n                        \r\n                        // Current pixel in Sprite is on\r\n                        // Screen pixel is off\r\n                        // Draw pixel at coords\r\n                        if (currSpritePixel != 0) {\r\n                            if (screenPixel == 1) {\r\n                                this.io.setPixel(xCoord, yCoord, 0);\r\n                                // Set VF to 1\r\n                                this.v[0xF] = 1;\r\n                            }\r\n                            else {\r\n                                this.io.setPixel(xCoord, yCoord, 1);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n                case 0xE000:\r\n                    switch (oc & 0x00FF) {\r\n                        case 0x009E: // EX9E - SKP Vx\r\n                            // key pressed\r\n                            if (this.io.keysCurrentlyPressed[this.v[x]])\r\n                                this.pc += 2;\r\n                            break;\r\n                        case 0x00A1: // EXA1 - SKNP Vx\r\n                            // key not pressed\r\n                            if (!this.io.keysCurrentlyPressed[this.v[x]])\r\n                                this.pc += 2;\r\n                            break;\r\n                    }\r\n                    break;\r\n                case 0xF000: \r\n                    switch (oc & 0x00FF) {\r\n                        case 0x0007: // FX07 - LD Vx, DT\r\n                            this.v[x] = this.delayTimer;\r\n                            break;\r\n                        case 0x000A: // FX0A - LD Vx, K\r\n                            // Keyboard\r\n                            this.isExecuting = false;\r\n                            // Need to create a callback to get the key pressed\r\n                            let keyPressCallback = (pressedKey) => {\r\n                                this.v[x] = pressedKey;\r\n                                this.isExecuting = true;\r\n                            }\r\n                            // Attach callback to get the value back\r\n                            this.io.keyPressDetector = keyPressCallback.bind(this);\r\n                            break;\r\n                        case 0x0015: // FX15 - LD DT, Vx\r\n                            this.delayTimer = this.v[x];\r\n                            break;\r\n                        case 0x0018: // FX18 - LD ST, Vx\r\n                            this.soundTimer = this.v[x];\r\n                            break;\r\n                        case 0x001E: // FX1E - ADD I, Vx\r\n                            this.i = this.i + this.v[x];\r\n                            break;\r\n                        case 0x0029: // FX29 - LD F, Vx\r\n                            // All fonts are stored oin first 80 bytes of memory\r\n                            this.i = this.v[x] * 5; \r\n                            break;\r\n                        case 0x0033: // FX33 - LD B, Vx\r\n                            this.memory[this.i] = Math.floor(this.v[x]/100);\r\n                            this.memory[this.i+1] = Math.floor((this.v[x]%100)/10);\r\n                            this.memory[this.i+2] = Math.floor(this.v[x]%10);\r\n                            break;\r\n                        case 0x0055: // FX55 - LD [I], Vx\r\n                            for (let index = 0; index <= x; index++) {\r\n                                this.memory[this.i + index] = this.v[index];\r\n                            }\r\n                            this.i = this.i + x + 1;\r\n                            break;\r\n                        case 0x0065: // FX65 - LD Vx, [I]\r\n                            for (let index = 0; index <= x; index++) {\r\n                                this.v[index] = this.memory[this.i + index]; \r\n                            }\r\n                            this.i = this.i + x + 1;\r\n                            break;\r\n                        default:\r\n                            console.error(\"Wrong opcode for 0xF000: \" + oc);\r\n                            break;\r\n                    }\r\n                    break;\r\n            default:\r\n                console.error(\"Wrong opcode: \" + oc);\r\n                break;\r\n        }\r\n    }\r\n\r\n    decode1(instruction) {\r\n        this.pc += 2;\r\n        \r\n        let x = (instruction & 0x0F00) >> 8;\r\n        let y = (instruction & 0x00F0) >> 4;\r\n\r\n        switch(instruction & 0xF000) {\r\n            case 0x0000:\r\n                switch(instruction) {\r\n                    case 0x00E0:\r\n                        this.io.clearDisplay(); // CLR\r\n                        break;\r\n                    case 0x0EE:\r\n                        this.pc = this.stack.pop(); // RET (May later change to this.sp--)\r\n                        break;\r\n                }\r\n                break;\r\n            case 0x1000:\r\n                this.pc = instruction & 0xFFF; // JP addr\r\n                break;\r\n            case 0x2000:\r\n                this.stack.push(this.pc);\r\n                this.pc = instruction & 0xFFF; // CALL addr\r\n                break;\r\n            case 0x3000:\r\n                if(this.v[x] === (instruction & 0xFF)) // SE Vx, byte\r\n                    this.pc += 2;\r\n                break;\r\n            case 0x4000:\r\n                if(this.v[x] != (instruction & 0xFF)) { // SNE Vx, byte\r\n                    this.pc += 2;\r\n                }\r\n                break;\r\n            case 0x5000:\r\n                if(this.v[x] === this.v[y]) { // SE Vx, Vy\r\n                    this.pc += 2;\r\n                }\r\n                break;\r\n            case 0x6000:\r\n                this.v[x] = (instruction & 0xFF); // LD Vx, byte\r\n                break;\r\n            case 0x7000:\r\n                this.v[x] += (instruction & 0xFF); // ADD Vx, byte\r\n                break;\r\n            case 0x8000:\r\n                switch (instruction & 0xF) {\r\n                    case 0x0:\r\n                        this.v[x] = this.v[y]; // LD Vx, Vy\r\n                        break;\r\n                    case 0x1:\r\n                        this.v[x] |= this.v[y]; // OR Vx, Vy\r\n                        break;\r\n                    case 0x2:\r\n                        this.v[x] &= this.v[y]; // AND Vx, Vy\r\n                        break;\r\n                    case 0x3:\r\n                        this.v[x] ^= this.v[y]; // XOR Vx, Vy\r\n                        break;\r\n                    case 0x4:\r\n                        let sum = (this.v[x] += this.v[y]); // ADD Vx, Vy\r\n\r\n                        this.v[0xF] = 0;\r\n\r\n                        if(sum > 0xFF)\r\n                            this.v[0xF] = 1;\r\n\r\n                        this.v[x] = sum;\r\n                        break;\r\n                    case 0x5:\r\n                        this.v[0xF] = 0;            \r\n                        if(this.v[x] > this.v[y]) // SUB Vx, Vy\r\n                            this.v[0xF] = 1;\r\n                        \r\n                        this.v[x] -= this.v[y];\r\n                        break;\r\n                    case 0x6:\r\n                        this.v[0xF] = this.v[x] & 0x1; // SHR Vx, vy\r\n                        this.v[x] >>= 1;\r\n                        break;\r\n                    case 0x7:\r\n                        this.v[0xF] = 0;       \r\n                        if(this.v[y] > this.v[x]) // SUBN Vx, Vy\r\n                            this.v[0xF] = 1;\r\n\r\n                        this.v[x] = this.v[y] - this.v[x];\r\n                        break;\r\n                    case 0xE:\r\n                        this.v[0xF] = this.v[x] & 0x80; // SHL Vx {, Vy}\r\n                        this.v[x] <<= 1;\r\n                        break;\r\n                    default:\r\n                        throw new Error('BAD OPCODE');\r\n                }\r\n                break;\r\n            case 0x9000:\r\n                if(this.v[x] != this.v[y]) // SNE Vx, Vy\r\n                    this.pc += 2;\r\n                break;\r\n            case 0xA000:\r\n                this.index = instruction & 0xFFF; // LD I, addr\r\n                break;\r\n            case 0xB000:\r\n                this.pc = (instruction & 0xFFF) + this.v[0]; // JP V0, addr\r\n                break;\r\n            case 0xC000:\r\n                let rand = Math.floor(Math.random() * 0xFF); // RND Vx, byte\r\n                this.v[x] = rand & (instruction & 0xFF);\r\n                break;\r\n            case 0xD000:\r\n                let xCoord = this.v[x];\r\n                let yCoord = this.v[y];\r\n                let rows = instruction & 0xF; // N rows\r\n                \r\n                // Set VF to 0\r\n                this.v[0xF] = 0;\r\n\r\n                for (let row = 0; row < rows; row++) {\r\n                    let spriteData = this.memory[this.i + row];\r\n                    \r\n                    for (let pix = 0; pix < 8; pix++) {                        \r\n                        xCoord = this.v[x] + pix;\r\n                        yCoord = this.v[y] + row;\r\n\r\n                        // 0x80      == 1000 0000\r\n                        // 0x80 >> 0 == 1000 0000\r\n                        // 0x80 >> 1 == 0100 0000\r\n                        // 0x80 >> 7 == 0000 0001\r\n                        let mask = 0x80 >> pix;\r\n                        let currSpritePixel = (spriteData & mask); \r\n                        let screenPixel = this.io.getPixel(xCoord, yCoord);\r\n                        \r\n                        // Current pixel in Sprite is on\r\n                        // Screen pixel is on\r\n                        // Turn off the pixel and set VF to 1\r\n                        \r\n                        // Current pixel in Sprite is on\r\n                        // Screen pixel is off\r\n                        // Draw pixel at coords\r\n                        if (currSpritePixel != 0) {\r\n                            if (screenPixel == 1) {\r\n                                this.io.setPixel(xCoord, yCoord, 0);\r\n                                // Set VF to 1\r\n                                this.v[0xF] = 1;\r\n                            }\r\n                            else {\r\n                                this.io.setPixel(xCoord, yCoord, 1);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                break;\r\n            case 0xE000:\r\n                switch (instruction & 0xFF) {\r\n                    case 0x9E: // EX9E - SKP Vx\r\n                        // key pressed\r\n                        if (this.io.keysCurrentlyPressed[this.v[x]])\r\n                            this.pc += 2;\r\n                        break;\r\n                    case 0xA1: // EXA1 - SKNP Vx\r\n                        // key not pressed\r\n                        if (!this.io.keysCurrentlyPressed[this.v[x]])\r\n                            this.pc += 2;\r\n                        break;\r\n                    default:\r\n                        throw new Error('BAD OPCODE');\r\n                }\r\n        \r\n                break;\r\n            case 0xF000:\r\n                switch(instruction & 0xFF) {\r\n                    case 0x07:\r\n                        this.v[x] = this.delayTimer; // LD Vx, DT\r\n                        break;\r\n                    case 0x0A:\r\n                        // Keyboard\r\n                        this.isExecuting = false;\r\n                        // Need to create a callback to get the key pressed\r\n                        let keyPressCallback = (pressedKey) => {\r\n                            this.v[x] = pressedKey;\r\n                            this.isExecuting = true;\r\n                        }\r\n                        // Attach callback to get the value back\r\n                        this.io.keyPressDetector = keyPressCallback.bind(this);\r\n                        break;\r\n                    case 0x15:\r\n                        this.delayTimer = this.v[x]; // LD Dt, Vx\r\n                        break;\r\n                    case 0x18:\r\n                        this.soundTimer = this.v[x]; // LD ST, Vx\r\n                        break;\r\n                    case 0x1E:\r\n                        this.i += this.v[x]; // ADD I, Vx\r\n                        break;\r\n                    case 0x29:\r\n                        this.i = this.v[x] * 5; //  LD F, Vx\r\n                        break;\r\n                    case 0x33:\r\n                        this.memory[this.i] = parseInt(this.v[x] / 100); // LD B, Vx\r\n                        this.memory[this.i + 1] = parseInt((this.v[x]%100)/10);\r\n                        this.memory[this.i + 2] = parseInt(this.v[x]%10);\r\n                        break;\r\n                    case 0x55:\r\n                        for (let ri=0; ri <= x; ri++)  // LD [I], Vx\r\n                            this.memory[this.i + ri] = this.v[ri];\r\n                        break;\r\n                    case 0x65:\r\n                        for(let ri=0; ri <= x; ri++) // LD Vx, [I]\r\n                            this.v[ri] = this.memory[this.i + ri];\r\n                        break;\r\n                    default:\r\n                        throw new Error('0xF BAD OPCODE ' + instruction);\r\n                }\r\n                break;\r\n            default:\r\n                throw new Error('BAD OPCODE');\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default Chippy8;","import Chippy8 from \"./chippy8\";\r\n\r\n/**\r\n * Variables and constants\r\n */\r\nlet chippy8;\r\nlet romFileData = undefined;\r\nlet fps = 60;\r\n\r\nconst canvas = document.getElementById(\"canvas\");\r\nconst fileToRead = document.getElementById(\"romFile\");\r\nconst reloadButton = document.getElementById(\"start\");\r\n// const selectOption = document.getElementById(\"romsOptions\");\r\n// const image = document.getElementById(\"image\");\r\n// const keypad = document.getElementById(\"keypad\");\r\n\r\nif (canvas.getContext) {\r\n    console.log(\"Welcome to Chip 8 Emulator\");\r\n    chippy8 = new Chippy8(canvas);\r\n} else {\r\n    console.log(\"Canvas not supported. Try different browser.\");\r\n}\r\n\r\nfileToRead.addEventListener(\"change\", handleFileUpload);\r\nreloadButton.addEventListener(\"click\", reloadRom);\r\n// selectOption.addEventListener(\"change\", getRom);\r\n\r\n// keypad.onmousemove = (event) => {\r\n//     image.style.left = event.clientX + 'px';\r\n//     image.style.top = event.clientY + 'px';\r\n// }\r\n// keypad.onmouseover = () => {\r\n//     image.style.visibility = \"visible\";\r\n// }\r\n// keypad.onmouseout = () => {\r\n//     image.style.visibility = \"hidden\";\r\n// }\r\n\r\n/**\r\n * Functions\r\n */\r\nfunction handleFileUpload() {\r\n    let x = document.getElementById(\"romFile\").files[0];\r\n    \r\n    let fileReader = new FileReader();\r\n    fileReader.readAsArrayBuffer(x);\r\n    fileReader.onloadend = (event) => {\r\n        romFileData = event.target.result;\r\n        console.log(romFileData.byteLength);\r\n        \r\n        // loadRom(romFileData);\r\n    };\r\n}\r\n\r\n// function getRom(event) {\r\n//     console.log(typeof(ibm));\r\n//     console.log(ibm);\r\n//     // console.log(event.target.value);\r\n\r\n//     let fileReader = new FileReader();\r\n//     fileReader.readAsArrayBuffer(ibm);\r\n//     fileReader.onloadend = (event) => {\r\n//         // console.log(event.target.result.byteLength);\r\n//     };\r\n// }\r\n\r\nfunction loadRom(rom) {\r\n    window.cancelAnimationFrame(animate);\r\n\r\n    chippy8 = new Chippy8(canvas);\r\n    chippy8.uploadRomToMemory(rom);\r\n\r\n    animate();\r\n}\r\n\r\nfunction reloadRom() {\r\n    if (romFileData) {\r\n        loadRom(romFileData);\r\n    }\r\n    else {\r\n        alert(\"No rom uploaded!\");\r\n    }\r\n}\r\n\r\nfunction animate() {\r\n    setTimeout(() => {       \r\n        requestAnimationFrame(animate);\r\n        chippy8.emulatorLoop();\r\n    }, 1000/fps);\r\n}"]}